---
import ThemeToogle from './ThemeToggle.astro';
import LanguageToogle from './LanguageToogle.astro';

const lang = Astro.params.lang;

const navItems = [
  {
    title: lang === 'es' ? 'Experiencia' : 'Experience',
    label: 'experiencia',
    href: '/' + lang + '/#experiencia',
  },
  {
    title: lang === 'es' ? 'Proyectos' : 'Projects',
    label: 'proyectos',
    href: '/' + lang + '/#proyectos',
  },
  {
    title: lang === 'es' ? 'Sobre m√≠' : 'About Me',
    label: 'sobre-mi',
    href: '/' + lang + '/#sobre-mi',
  },
  {
    title: lang === 'es' ? 'Contacto' : 'Contact',
    label: 'contacto',
    href: 'mailto:tivenorjuela7@gmail.com',
  },
];
---

<header
  class='fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2'
>
  <nav
    class='flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center'
  >
    {
      navItems.map((navItem) => (
        <a
          class='relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500'
          aria-label={navItem.label}
          href={navItem.href}
        >
          {navItem.title}
        </a>
      ))
    }
    <ThemeToogle />
    <LanguageToogle />
  </nav>
  <script>
    document.addEventListener('astro:page-load', () => {
      const sections = document.querySelectorAll('section');
      const navItems = document.querySelectorAll('header nav a');

      const callback = (entries: any[]) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            navItems.forEach((item) => {
              if (item.getAttribute('aria-label') == entry.target.id) {
                item.classList.add('text-blue-500');
              } else {
                item.classList.remove('text-blue-500');
              }
            });
          }
        });
      };

      const observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: '0px',
        threshold: 0.3,
      });

      sections.forEach((section) => {
        observer.observe(section);
      });

      // Cleanup function
      document.onvisibilitychange = () => {
        if (document.visibilityState === 'hidden') {
          observer.disconnect();
        } else {
          sections.forEach((section) => {
            observer.observe(section);
          });
        }
      };
    });
  </script>

  <style>
    nav {
      animation: nav-shadown 1s linear both;
      animation-timeline: scroll();
      animation-range: 0 100px;
    }

    nav {
      @apply dark:bg-gray-800/90 bg-white/50;
    }

    @keyframes nav-shadown {
      0% {
        @apply dark:bg-gray-800/0 bg-white/0;
      }
      to {
        @apply shadow-lg ring-1 backdrop-blur ring-white/10;
      }
    }
  </style>
</header>
